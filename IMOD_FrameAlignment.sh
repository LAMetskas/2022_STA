#!/bin/bash

## IMOD_FrameAlignment.sh is a script that runs IMOD-based frame alignment
## on framestacks to make a tiltstack for further processing. The .mrc files
## are readable by TOM toolbox by keeping the rawtlt file separated. 

## Run the script from the tomogram directory.  Make sure to
## change the input variables according to your dataset.

## Current settings: use a weak 8A low-pass filter for the cross-correlation
## (Filter Radius2 and Sigma2 - you may have to tweak this).  No high-pass 
## filter. Use bin2 for alignment and sums (helpful with the tiny per-frame 
## dose). Defaults of 20 for shift, 0.1 for stop, 0.1 for weight. Limit to 
## 5 iterations for refinement - may want to delete this if this is a 
## consistent limiting factor.

## This script is optimized for K3 frames generated by the Caltech G3 Krios.
## The camera has a 180-degree rotation plus a flip.

## Written by Lauren Ann Metskas on 6 July 2019. This work is licensed under 
## the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
## License. To view a copy of this license, visit
## http://creativecommons.org/licenses/by-nc-sa/4.0/.



#BEFORE YOU START: copy mdocs to frame folder



#Inputs
export gainref='<filename>'
export defectfile='<filename>'
nCores=4

cd frames/



#Start by unpacking the 4-byte image files, gain-correcting them, and 
#aligning them.
for l in TS_*.mdoc
do
export prefix=${l/%\.mrc.mdoc/_}
export tomostr0=${prefix/#\TS_}
export tomostr=${tomostr0/%\_}

echo "Starting on Tomogram $tomostr"

ntilts=`ls $prefix*.mrcs | wc -l`
lastTilt="$((ntilts-1))"

(
for i in $prefix*.mrcs
do
((n=n%nCores)); ((n++==0)) && wait
tiltname=`echo $i | cut -d _ -f 1-3`
clip unpack -n 32 -m 1 -D $defectfile $i $gainref gaincor_${i:0:9}.mrcs > $tiltname.log &
done
wait
)
wait
read -p "Waiting for files to finish writing" -t 30
echo "Unpacking is finished"

(
for i in $prefix*.mrcs
do
((n=n%nCores));	((n++==0)) && wait
tiltname=`echo $i | cut	-d _ -f	1-3`
rotatevol -angles 180,0,0 -i gaincor_${i:0:9}.mrcs -ou rot_${i:0:9}.mrcs >> $tiltname.log &
done
wait
)
wait
read -p "Waiting for files to finish writing" -t 30
echo "Rotation is finished"

(
for i in $prefix*.mrcs
do
((n=n%nCores));	((n++==0)) && wait
tiltname=`echo $i | cut -d _ -f 1-3`
clip flipy rot_${i:0:9}.mrcs rotflip_${i:0:9}.mrcs >> $tiltname.log &
done
wait
)
wait
read -p "Waiting for files to finish writing" -t 60
echo "Flipping is finished"
rm gaincor_$prefix*


for i in $prefix*.mrcs
do
tiltname=`echo $i | cut -d _ -f 1-3`
alignframes -InputFile rotflip_${i:0:9}.mrcs -OutputImageFile ${i/%\.mrcs/_ali.mrcs} \
-PairwiseFrames -1 -AlignAndSumBinning 2,2 -UseGPU 0 \
-RefineAlignment 5 -FilterRadius2 0.125 -FilterSigma2 0.1429 \
-RefineRadius2 0.167 -UseHybridShifts >> $tiltname.log

echo "finished first round alignment for $tiltname"

# redo the frame alignment with grouping if residuals are bad
grep -a " Weighted residual mean " $tiltname.log > temp1.txt
export meanResidual=`cat temp1.txt | cut -d = -f 2 | cut -d , -f 1`
if (( $(echo $meanResidual'>'1 | bc -l ) ))
then
  echo "Redoing frame alignment for $tiltname"
  rm ${i/%\.mrcs/_ali.mrcs}
  rm temp1.txt
  alignframes -InputFile rotflip_${i:0:9}.mrcs -OutputImageFile ${i/%\.mrcs/_ali.mrcs} \
  -PairwiseFrames -1 -AlignAndSumBinning 2,2 -UseGPU 0 -GroupSize 3 \
  -RefineAlignment 5 -FilterRadius2 0.125 -FilterSigma2 0.1429 \
  -RefineRadius2 0.167 -UseHybridShifts >> $tiltname.log
fi 
done
echo "Frame alignment is finished"
rm rot_$prefix*.mrcs


ls $prefix*ali.mrcs | grep -oP "$prefix\K.*" | sort -n > "$prefix"tilts.txt
more "$prefix"tilts.txt | cut -d _ -f 1 > "$tomostr".rawtlt
sed -i "s/^/$prefix/" "$prefix"tilts.txt
sed -i 's/$/\n0/g' "$prefix"tilts.txt

ntilts=`ls $prefix*ali.mrcs | wc -l`
echo $ntilts | cat - "$prefix"tilts.txt > temp && mv temp "$prefix"tilts.txt

newstack -q -filein "$prefix"tilts.txt -output "$tomostr".mrc

rm rotflip_$prefix*.mrcs
rm "$prefix"*_ali.mrcs

done



# Clean up
rm *tilts.txt
